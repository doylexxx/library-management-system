<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>